/**
 * @file Pathing.java
 * @class Pathing
 * Pathing - Heavily borrowed and adapted from EthanApi.
 *
 * @author agge3
 * @version 1.0
 * @since 2024-06-15
 *
 * Special thanks to EthanApi and PiggyPlugins for API, inspiration, and a 
 * source of code at times.
 */

package com.aggeplugins.Skiller;

import com.aggeplugins.Skiller.Context;

/* Begin shortest-path. */
import net.runelite.api.Client;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.SpriteID;
import net.runelite.api.Varbits;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.worldmap.WorldMap;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.worldmap.WorldMapOverlay;
import net.runelite.client.ui.overlay.worldmap.WorldMapPoint;
import net.runelite.client.ui.overlay.worldmap.WorldMapPointManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import shortestpath.pathfinder.CollisionMap;
import shortestpath.pathfinder.Pathfinder;
import shortestpath.pathfinder.PathfinderConfig;
import shortestpath.pathfinder.SplitFlagMap;
import shortestpath.*;
/* End shortest-path. */

import com.google.common.util.concurrent.ThreadFactoryBuilder;
import com.google.inject.Inject;
import com.google.inject.Provides;
import java.awt.Color;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadFactory;
import java.util.regex.Pattern;
/* End shortest-path. */

import com.example.EthanApiPlugin.Collections.TileObjects;
import com.example.EthanApiPlugin.EthanApiPlugin;
import com.example.EthanApiPlugin.PathFinding.GlobalCollisionMap;
import com.example.Packets.MousePackets;
import com.example.Packets.MovementPackets;
import com.example.Packets.ObjectPackets;

import net.runelite.api.ObjectComposition;
import net.runelite.api.Tile;
import net.runelite.api.WallObject;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.*;
import net.runelite.client.RuneLite;

import lombok.Getter;
import com.google.inject.Inject;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadFactory;
import com.google.common.util.concurrent.ThreadFactoryBuilder;

@Slf4j
public class Pathing {
    public enum Type {
        SHORTEST_PATH,
        ETHANS_API;
    }

    public Pathing(Context ctx)
    {
        this.ctx = ctx;
        log.info("Constructing Pathing!");
        
        this.ticks = 0;
    }

    private ExecutorService pathfinderExecutor;
    private Future<?> pathfinderFuture;
    private final Object pathfinderMutex = new Object();
    @Getter
    private Pathfinder pathfinder;
    @Getter
    private PathfinderConfig pathfinderConfig;

    public void initPathfinder()
    {
        SplitFlagMap map = SplitFlagMap.fromResources();
        Map<WorldPoint, List<Transport>> transports = Transport.loadAllFromResources();

        pathfinderConfig = new PathfinderConfig(map, transports, ctx.client);
    }

    //SplitFlagMap map = SplitFlagMap.fromResources();
    //Map<WorldPoint, List<Transport>> transports = Transport.loadAllFromResources();
    //pathfinderConfig = new PathfinderConfig(map, transports, ctx.client);

    //public void startPathfinder(WorldPoint start, WorldPoint end)
    //{
    //    synchronized (pathfinderMutex) {
    //        if (pathfinder != null) {
    //            pathfinder.cancel();
    //            if (pathfinderFuture != null) {
    //                pathfinderFuture.cancel(true);
    //            }
    //        }
    //        if (pathfinderExecutor == null) {
    //            ThreadFactory thrFact = 
    //                new ThreadFactoryBuilder().setNameFormat("shortest-path-%d")
    //                                          .build();
    //            pathfinderExecutor = Executors.newSingleThreadExecutor(thrFact);
    //        }
    //        pathfinderConfig.refresh();
    //        pathfinder = new Pathfinder(pathfinderConfig, start, end);
    //        pathfinderFuture = pathfinderExecutor.submit(pathfinder);
    //    }
    //}
    
    public void restartPathfinder(WorldPoint start, WorldPoint end) {
        synchronized (pathfinderMutex) {
            if (pathfinder != null) {
                pathfinder.cancel();
                pathfinderFuture.cancel(true);
            }

            if (pathfinderExecutor == null) {
                ThreadFactory shortestPathNaming = new ThreadFactoryBuilder().setNameFormat("shortest-path-%d").build();
                pathfinderExecutor = Executors.newSingleThreadExecutor(shortestPathNaming);
            }
        }

        ctx.plugin.getClientThread().invokeLater(() -> {
            pathfinderConfig.refresh();
            synchronized (pathfinderMutex) {
                pathfinder = new Pathfinder(pathfinderConfig, start, end);
                pathfinderFuture = pathfinderExecutor.submit(pathfinder);
            }
        });
    }



    // private int WAIT = 30;
    
    public void calculatePath()
    {
        if (this.getPathfinder() != null) {
            if (this.getPathfinder().isDone()) {
                    log.info("Path size: " + this.getPathfinder().getPath().size());
                    if (this.getPathfinder().getPath().size() == 1) {
                        log.info("Restarted path finder!");
                        restartPathfinder(getPos(), goal);
                    }
            }
        }
    }

    public boolean pathTo(WorldPoint wp)
    {
        this.initPathfinder();
        restartPathfinder(getPos(), wp);
        goal = wp;
        return true;
    }

    //public void initPathfinder(WorldPoint wp)
    //{
    //    synchronized (pathfinderMutex) {
    //        pathfinder = new Pathfinder(pathfinderConfig, getPos(), wp);
    //        pathfinderFuture = pathfindingExecutor.submit(() -> {
    //            pathingfinder.run();
    //        });
    //    }
    //}

    //public void initThr()
    //{
    //    synchronized (pathfinderMutex) {
    //        ThreadFactory thrFact = 
    //            new ThreadFactoryBuilder().setNameFormat("shortest-path-%d")
    //                                      .build();
    //        pathfindingExecutor = Executors.newSingleThreadExecutor(thrFact);
    //    }
    //}

    //public void checkPathfinderCompletion()
    //{
    //    synchronized (pathfinderMutex) {
    //        if (pathfinderFuture != null && pathfinderFuture.isDone()) {
    //            log.info("Path size: " + pathfinder.getPath().size();
    //        }
    //    }
    //    pathfinderFuture = null;
    //}

    //public ScheduledFuture<?> mainScheduledFuture;
    //
    //protected ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
   
    //public void thr(WorldPoint wp) {
    //    mainScheduledFuture = scheduledExecutorService.scheduleWithFixedDelay(() -> {
    //        synchronized (pathfinderMutex) {
    //            pathfinder = new Pathfinder(pathfinderConfig, getPos(), wp);
    //            pathfinder.run();
    //    }, 0, 600, TimeUnit.MILLISECONDS);
    //}
    
    

    












    //public void startPathfinding(WorldPoint start, WorldPoint end) {
    //    synchronized (pathfinderMutex) {
    //        if (pathfinder != null) {
    //            pathfinder.cancel();
    //    }
    //        if (pathfinderFuture != null) {
    //            pathfinderFuture.cancel(true);
    //        }

    //        if (pathfindingExecutor == null) {
    //            ThreadFactory shortestPathNaming = new ThreadFactoryBuilder().setNameFormat("shortest-path-%d").build();
    //            pathfindingExecutor = Executors.newSingleThreadExecutor(shortestPathNaming);
    //        }

    //    }

    //    ctx.clientThread.invokeLater(() -> {
    //        pathfinderConfig.refresh();
    //        synchronized (pathfinderMutex) {
    //            pathfinder = new Pathfinder(pathfinderConfig, start, end);
    //            pathfinderFuture = pathfindingExecutor.submit(() -> {
    //                try {
    //                    log.info("Pathfinding started from {} to {}", start, end);
    //                    pathfinder.run(); // Ensure this method exists and performs the pathfinding
    //                    int pathSize = pathfinder.getPath().size();
    //                    log.info("Pathfinding calculation completed. Path size: " + pathSize);
    //                } catch (Exception e) {
    //                    log.error("Pathfinding calculation error: ", e);
    //                }
    //                return null;
    //            });
    //        }
    //    });
    //}

        //getClientThread().invokeLater(() -> {
        //    pathfinderConfig.refresh();
        //    synchronized (pathfinderMutex) {
        //        pathfinder = new Pathfinder(pathfinderConfig, start, end);
        //        pathfinderFuture = pathfindingExecutor.submit(pathfinder);
        //    }
        //});



    ///**
    // * Path to a WorldPoint and choose a pathing algorithm.
    // * @warning EXPENSIVE call, a couple call stacks and an algorithm call. Can 
    // * be made less expensive by specifying Pathing.Type and ensuring a valid 
    // * WorldPoint.
    // */
    //public boolean pathTo(WorldPoint wp, Pathing.Type type) {
    //    //try {
    //        log.info("Path to: " + wp);
    //        this.finalizer(); // ensure clean state
    //        this.init(); // and init

    //        switch(type) {
    //        case SHORTEST_PATH:
    //            // shortest-path to calculate the path
    //            pathfinder = new Pathfinder(pathfinderConfig, getPos(), wp);

    //            //path = pathfinder.getPath();

    //            //log.info("shortest-path goal: " + 
    //            //    path.get(path.size() - 1));
    //            //log.info("shortest-path size: " + path.size());

    //            break;
    //        case ETHANS_API:
    //            log.info("Using EthansApi for pathing");
    //            path = GlobalCollisionMap.findPath(wp);
    //            break;
    //        default:
    //            // Default is to just call the overloaded method with its 
    //            // default.
    //            pathTo(wp);
    //            break;
    //        }
    //        
    //        goal = wp;
    //        log.info("Final pathing goal: " + goal);

    //        // TRUE on success, and will guard just about anything.
    //        return goal != null;

    //    //} catch (NullPointerException e) {
    //    //      if wp.getPlane == playerPlane
    //    //    // Guard against an incorrectable recursive state. A path is never
    //    //    // going to be reached if this condition is met anyway, we should
    //    //    // have exited long ago.
    //    //    if (wp.getX() > 1500) {
    //    //        // Recursive call with offset until a valid path exists.
    //    //        return pathTo(offset(wp), type);
    //    //    } else {
    //    //        // Couldn't find a valid WorldPoint and never will.
    //    //        log.info("Could not correct to a valid WorldPoint!");
    //    //        return false;
    //    //    }
    //    //}
    //}

    ///**
    // * Overloaded method to call pathTo() with the default Pathing.Type 
    // * (ShortestPath).
    // */
    //public boolean pathTo(WorldPoint wp) 
    //{
    //    return pathTo(wp, Pathing.Type.SHORTEST_PATH);
    //}

    public boolean isPathingTo(WorldPoint goal)
    {
        log.info("Pathing to...");
        return goal != null && goal.equals(goal);
    }

    public boolean reachedGoal() 
    {
        return goal != null && 
               goal.equals(ctx.client.getLocalPlayer().getWorldLocation());
    }

    public boolean timeout(int n)
    {
        return true;
    }

    public boolean run() 
    {
        if (!pathfinder.isDone()) {
            pathfinder.run();
            log.info("Calculating path...");
        }

        path = pathfinder.getPath();
        log.info("Path size: " + path.size());

        //pathfinder.run();
        //path = pathfinder.getPath();
        log.info("Pathing: Current goal is " + goal);
        log.info("Current path is " + path.get(0));
        ++ticks;

        if (reachedGoal() && goal == null) {
            log.info("Reached goal!");
            this.finalizer();
            return false;
        }

        if (path != null && path.size() >= 1) {
            if (currPathDest != null && 
                !atCurrPathDest() && !EthanApiPlugin.isMoving()) {

                log.info("Stopped walking, clicking destination again");
                MousePackets.queueClickPacket();
                MovementPackets.queueMovement(currPathDest);
            }
                
            if (currPathDest == null || 
                atCurrPathDest() || !EthanApiPlugin.isMoving()) {

                log.info("Current path destination is " + currPathDest);

                int step = rand.nextInt((35 - 10) + 1) + 10;
                int max = step;
                for (int i = 0; i < step; i++) {
                    if (path.size() - 2 >= i) {
                        log.info("Current path is" + path.get(i));
                        if (isDoored(path.get(i), path.get(i + 1))) {
                            max = i;
                            break;
                        }
                    }
                }

                if (isDoored(getPos(), path.get(0))) {
                    log.info("Current path is " + currPathDest);
                    log.info("Door!");
                    WallObject wallObject = getTile(getPos()).getWallObject();
                    if (wallObject == null) {
                        wallObject = getTile(path.get(0)).getWallObject();
                    }
                    ObjectPackets.queueObjectAction(
                        wallObject, false, "Open", "Close");
                    return true;
                }

                step = Math.min(max, path.size() - 1);
                currPathDest = path.get(step);
                log.info("Current path destination is " + currPathDest);

                if (path.indexOf(currPathDest) == (path.size() - 1)) {
                    path = null;
                } else {
                    path = path.subList(step + 1, path.size());
                }

                if (currPathDest.equals(getPos())) {
                    return true;
                }
                
                log.info("Current path destination is " + currPathDest);
                log.info("Pathing: Taking a step");
                MousePackets.queueClickPacket();
                MovementPackets.queueMovement(currPathDest);
            }
        }
        return true;
    }

    private void init()
    {
        try {
            this.rand = new Random();
            //this.path = new ArrayList<>(); // wait to init the path
            this.currPathDest = null;
            this.goal = null;
            //this.map = SplitFlagMap.fromResources();
            //this.transports = Transport.loadAllFromResources();
            //this.pathfinderConfig = new PathfinderConfig(map, transports, 
            //                                        ctx.client);
            pathfinderExecutor = Executors.newSingleThreadExecutor();  
            SplitFlagMap map = SplitFlagMap.fromResources();
            Map<WorldPoint, List<Transport>> transports = Transport.loadAllFromResources();
            pathfinderConfig = new PathfinderConfig(map, transports, ctx.client);
        } catch (NullPointerException e) {
            log.info("Error: Unable to initialize pathing!");
        }
    }

    private void finalizer()
    {
        // null the references and ensure clean destruction
        this.path = null;
        this.currPathDest = null;
        this.goal = null;

        //this.pathfinder = null;
        pathfinder = null; // might not be instantiated and owned
        //this.map = null;
        //this.transports = null;
        //this.pathfinderConfig.refresh(); // hasn't been init yet!!!
        this.pathfinderConfig = null;
    }

    private WorldPoint getPos()
    {
        return ctx.client.getLocalPlayer().getWorldLocation();
    }

    private boolean atCurrPathDest()
    {
        return currPathDest.equals(getPos());
    }
    
    private WorldPoint offset(WorldPoint wp)
    {
        int offset = 1;
        return new WorldPoint(wp.getX() - offset, wp.getY(), wp.getPlane());
    }

    private boolean isDoored(WorldPoint a, WorldPoint b)
    {
        Tile tA = getTile(a);
        Tile tB = getTile(b);
        if (tA == null || tB == null) {
            return false;
        }
        return isDoored(tA, tB);
    }

    private boolean isDoored(Tile a, Tile b)
    {
        WallObject wallObject = a.getWallObject();
        if (wallObject != null) {
            ObjectComposition objectComposition = EthanApiPlugin.getClient().getObjectDefinition(wallObject.getId());
            if (objectComposition == null) {
                return false;
            }
            boolean found = false;
            for (String action : objectComposition.getActions()) {
                if (action != null && action.equals("Open")) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                return false;
            }
            int orientation = wallObject.getOrientationA();
            if (orientation == 1) {
                //blocks west
                if (a.getWorldLocation().dx(-1).equals(b.getWorldLocation())) {
                    return true;
                }
            }
            if (orientation == 4) {
                //blocks east
                if (a.getWorldLocation().dx(+1).equals(b.getWorldLocation())) {
                    return true;
                }
            }
            if (orientation == 2) {
                //blocks north
                if (a.getWorldLocation().dy(1).equals(b.getWorldLocation())) {
                    return true;
                }
            }
            if (orientation == 8) {
                //blocks south
                return a.getWorldLocation().dy(-1).equals(b.getWorldLocation());
            }
        }
        WallObject wallObjectb = b.getWallObject();
        if (wallObjectb == null) {
            return false;
        }
        ObjectComposition objectCompositionb = EthanApiPlugin.getClient().getObjectDefinition(wallObjectb.getId());
        if (objectCompositionb == null) {
            return false;
        }
        boolean foundb = false;
        for (String action : objectCompositionb.getActions()) {
            if (action != null && action.equals("Open")) {
                foundb = true;
                break;
            }
        }
        if (!foundb) {
            return false;
        }
        int orientationb = wallObjectb.getOrientationA();
        if (orientationb == 1) {
            //blocks east
            if (b.getWorldLocation().dx(-1).equals(a.getWorldLocation())) {
                return true;
            }
        }
        if (orientationb == 4) {
            //blocks south
            if (b.getWorldLocation().dx(+1).equals(a.getWorldLocation())) {
                return true;
            }
        }
        if (orientationb == 2) {
            //blocks south
            if (b.getWorldLocation().dy(+1).equals(a.getWorldLocation())) {
                return true;
            }
        }
        if (orientationb == 8) {
            //blocks north
            return b.getWorldLocation().dy(-1).equals(a.getWorldLocation());
        }
        return false;
    }

    private Tile getTile(WorldPoint point)
    {
        LocalPoint a = LocalPoint.fromWorld(EthanApiPlugin.getClient(), point);
        if (a == null) {
            return null;
        }
        return EthanApiPlugin.getClient().getScene().getTiles()[point.getPlane()][a.getSceneX()][a.getSceneY()];
    }

    // Pathing instance variables.
    private Random rand;
    private Context ctx;
    private List<WorldPoint> path;
    private WorldPoint currPathDest;
    private WorldPoint goal;

    // Pathfinder instance variables. 
    //private Pathfinder pathfinder;
    //private SplitFlagMap map;
    //private Map<WorldPoint, List<Transport>> transports;
    //private PathfinderConfig pathfinderConfig;

    private int ticks;
}
